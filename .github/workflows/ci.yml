name: CI

on:
  pull_request:
    branches:
      - main
      - dev
      - 'maintain/*'
    paths-ignore:
      - '*.md'

  push:
    branches:
      - main
      - dev
      - 'maintain/*'
    paths-ignore:
      - '*.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          version: latest
      - name: Install and run ruff
        run: |
          uv venv
          uv pip install ruff
          source .venv/bin/activate
          ruff check .
        shell: bash

  test:
    env:
      PYTHONDEVMODE: 1
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, '3.10', 3.11, 3.12, 3.13, 3.14]
        os: [ubuntu-latest, windows-latest, macos-latest]
        install-via: [pip]
        include:
          - python-version: 3.12
            os: ubuntu-latest
            install-via: script
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python Versions
        uses: actions/setup-python@v5
        with:
          python-version: |
            3.9
            3.10
            3.11
            3.12
            3.13
            3.14
          allow-prereleases: true
        if: matrix.os != 'macos-latest'
      - name: Setup Python Versions
        uses: actions/setup-python@v5
        with:
          python-version: |
            3.10
            3.11
            3.12
            3.13
            3.14
          allow-prereleases: true
        if: matrix.os == 'macos-latest'
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          allow-prereleases: true

      - name: Cache venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('uv.lock') }}
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Create venv and install dependencies
        run: |
          uv venv
          uv sync
        shell: bash

      - name: Create test output directory (Unix)
        if: runner.os != 'Windows'
        run: mkdir -p fit_tool/tests/out

      - name: Create test output directory (Windows)
        if: runner.os == 'Windows'
        run: New-Item -ItemType Directory -Force -Path fit_tool/tests/out

      - name: Test with pytest (Unix)
        if: runner.os != 'Windows'
        run: |
          uv run pytest --cov=fit_tool --cov-report=xml
        shell: bash

      - name: Test with pytest (Windows)
        if: runner.os == 'Windows'
        run: |
          uv run pytest --cov=fit_tool --cov-report=xml
        shell: pwsh

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: ${{ github.repository }}
