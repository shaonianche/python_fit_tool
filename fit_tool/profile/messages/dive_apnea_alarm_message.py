# Autogenerated. Do not modify.
#
# Profile: 21.171.00
from typing import Optional

from fit_tool.base_type import BaseType
from fit_tool.data_message import DataMessage
from fit_tool.definition_message import DefinitionMessage
from fit_tool.developer_field import DeveloperField
from fit_tool.endian import Endian
from fit_tool.field import Field
from fit_tool.sub_field import SubField
from fit_tool.profile.profile_type import *
from typing import List as list
from typing import Dict as dict


class DiveApneaAlarmMessage(DataMessage):
    ID = 393
    NAME = 'dive_apnea_alarm'

    @staticmethod
    def __get_field_size(definition_message: DefinitionMessage, field_id: int) -> int:
        size = 0
        if definition_message:
            field_definition = definition_message.get_field_definition(field_id)
            if field_definition:
                size = field_definition.size

        return size

    def __init__(self, definition_message=None, developer_fields=None, local_id: int = 0,
                 endian: Endian = Endian.LITTLE):
        super().__init__(name=DiveApneaAlarmMessage.NAME,
                         global_id=DiveApneaAlarmMessage.ID,
                         local_id=definition_message.local_id if definition_message else local_id,
                         endian=definition_message.endian if definition_message else endian,
                         definition_message=definition_message,
                         developer_fields=developer_fields,
                         fields=[
        MessageIndexField(
            size=self.__get_field_size(definition_message, MessageIndexField.ID),
            growable=definition_message is None), 
        DiveApneaAlarmDepthField(
            size=self.__get_field_size(definition_message, DiveApneaAlarmDepthField.ID),
            growable=definition_message is None), 
        DiveApneaAlarmTimeField(
            size=self.__get_field_size(definition_message, DiveApneaAlarmTimeField.ID),
            growable=definition_message is None), 
        DiveApneaAlarmEnabledField(
            size=self.__get_field_size(definition_message, DiveApneaAlarmEnabledField.ID),
            growable=definition_message is None), 
        DiveApneaAlarmAlarmTypeField(
            size=self.__get_field_size(definition_message, DiveApneaAlarmAlarmTypeField.ID),
            growable=definition_message is None), 
        DiveApneaAlarmSoundField(
            size=self.__get_field_size(definition_message, DiveApneaAlarmSoundField.ID),
            growable=definition_message is None), 
        DiveApneaAlarmDiveTypesField(
            size=self.__get_field_size(definition_message, DiveApneaAlarmDiveTypesField.ID),
            growable=definition_message is None), 
        DiveApneaAlarmIdField(
            size=self.__get_field_size(definition_message, DiveApneaAlarmIdField.ID),
            growable=definition_message is None), 
        DiveApneaAlarmPopupEnabledField(
            size=self.__get_field_size(definition_message, DiveApneaAlarmPopupEnabledField.ID),
            growable=definition_message is None), 
        DiveApneaAlarmTriggerOnDescentField(
            size=self.__get_field_size(definition_message, DiveApneaAlarmTriggerOnDescentField.ID),
            growable=definition_message is None), 
        DiveApneaAlarmTriggerOnAscentField(
            size=self.__get_field_size(definition_message, DiveApneaAlarmTriggerOnAscentField.ID),
            growable=definition_message is None), 
        DiveApneaAlarmRepeatingField(
            size=self.__get_field_size(definition_message, DiveApneaAlarmRepeatingField.ID),
            growable=definition_message is None), 
        DiveApneaAlarmSpeedField(
            size=self.__get_field_size(definition_message, DiveApneaAlarmSpeedField.ID),
            growable=definition_message is None)
        ])

        self.growable = self.definition_message is None

    @classmethod
    def from_bytes(cls, definition_message: DefinitionMessage, developer_fields: list[DeveloperField],
                   bytes_buffer: bytes, offset: int = 0):
        message = cls(definition_message=definition_message, developer_fields=developer_fields)
        message.read_from_bytes(bytes_buffer, offset)
        return message




    @property
    def message_index(self) -> Optional[int]:
        field = self.get_field(MessageIndexField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @message_index.setter
    def message_index(self, value: int):
        field = self.get_field(MessageIndexField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def depth(self) -> Optional[float]:
        field = self.get_field(DiveApneaAlarmDepthField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @depth.setter
    def depth(self, value: float):
        field = self.get_field(DiveApneaAlarmDepthField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def time(self) -> Optional[int]:
        field = self.get_field(DiveApneaAlarmTimeField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @time.setter
    def time(self, value: int):
        field = self.get_field(DiveApneaAlarmTimeField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def enabled(self) -> Optional[bool]:
        field = self.get_field(DiveApneaAlarmEnabledField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @enabled.setter
    def enabled(self, value: bool):
        field = self.get_field(DiveApneaAlarmEnabledField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def alarm_type(self) -> Optional[DiveAlarmType]:
        field = self.get_field(DiveApneaAlarmAlarmTypeField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @alarm_type.setter
    def alarm_type(self, value: DiveAlarmType):
        field = self.get_field(DiveApneaAlarmAlarmTypeField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def sound(self) -> Optional[Tone]:
        field = self.get_field(DiveApneaAlarmSoundField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @sound.setter
    def sound(self, value: Tone):
        field = self.get_field(DiveApneaAlarmSoundField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def dive_types(self) -> Optional[list[SubSport]]:
        field = self.get_field(DiveApneaAlarmDiveTypesField.ID)
        if field and field.is_valid():
            return field.get_values()
        else:
            return None



    @dive_types.setter
    def dive_types(self, value: list[SubSport]):
        field = self.get_field(DiveApneaAlarmDiveTypesField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                field.set_values(value)

    

    @property
    def id(self) -> Optional[int]:
        field = self.get_field(DiveApneaAlarmIdField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @id.setter
    def id(self, value: int):
        field = self.get_field(DiveApneaAlarmIdField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def popup_enabled(self) -> Optional[bool]:
        field = self.get_field(DiveApneaAlarmPopupEnabledField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @popup_enabled.setter
    def popup_enabled(self, value: bool):
        field = self.get_field(DiveApneaAlarmPopupEnabledField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def trigger_on_descent(self) -> Optional[bool]:
        field = self.get_field(DiveApneaAlarmTriggerOnDescentField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @trigger_on_descent.setter
    def trigger_on_descent(self, value: bool):
        field = self.get_field(DiveApneaAlarmTriggerOnDescentField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def trigger_on_ascent(self) -> Optional[bool]:
        field = self.get_field(DiveApneaAlarmTriggerOnAscentField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @trigger_on_ascent.setter
    def trigger_on_ascent(self, value: bool):
        field = self.get_field(DiveApneaAlarmTriggerOnAscentField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def repeating(self) -> Optional[bool]:
        field = self.get_field(DiveApneaAlarmRepeatingField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @repeating.setter
    def repeating(self, value: bool):
        field = self.get_field(DiveApneaAlarmRepeatingField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def speed(self) -> Optional[float]:
        field = self.get_field(DiveApneaAlarmSpeedField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @speed.setter
    def speed(self, value: float):
        field = self.get_field(DiveApneaAlarmSpeedField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    





class MessageIndexField(Field):
    ID = 254

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='message_index',
            field_id=self.ID,
            base_type=BaseType.UINT16,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class DiveApneaAlarmDepthField(Field):
    ID = 0

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='depth',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = 0,
                 scale = 1000,
                         size = size,
        units = 'm',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class DiveApneaAlarmTimeField(Field):
    ID = 1

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='time',
            field_id=self.ID,
            base_type=BaseType.SINT32,
        offset = 0,
                 scale = 1,
                         size = size,
        units = 's',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class DiveApneaAlarmEnabledField(Field):
    ID = 2

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='enabled',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class DiveApneaAlarmAlarmTypeField(Field):
    ID = 3

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='alarm_type',
            field_id=self.ID,
            base_type=BaseType.ENUM,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class DiveApneaAlarmSoundField(Field):
    ID = 4

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='sound',
            field_id=self.ID,
            base_type=BaseType.ENUM,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class DiveApneaAlarmDiveTypesField(Field):
    ID = 5

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='dive_types',
            field_id=self.ID,
            base_type=BaseType.ENUM,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class DiveApneaAlarmIdField(Field):
    ID = 6

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='id',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class DiveApneaAlarmPopupEnabledField(Field):
    ID = 7

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='popup_enabled',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class DiveApneaAlarmTriggerOnDescentField(Field):
    ID = 8

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='trigger_on_descent',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class DiveApneaAlarmTriggerOnAscentField(Field):
    ID = 9

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='trigger_on_ascent',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class DiveApneaAlarmRepeatingField(Field):
    ID = 10

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='repeating',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class DiveApneaAlarmSpeedField(Field):
    ID = 11

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='speed',
            field_id=self.ID,
            base_type=BaseType.SINT32,
        offset = 0,
                 scale = 1000,
                         size = size,
        units = 'mps',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )