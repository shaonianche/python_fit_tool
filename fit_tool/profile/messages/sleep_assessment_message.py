# Autogenerated. Do not modify.
#
# Profile: 21.171.00
from typing import Optional

from fit_tool.base_type import BaseType
from fit_tool.data_message import DataMessage
from fit_tool.definition_message import DefinitionMessage
from fit_tool.developer_field import DeveloperField
from fit_tool.endian import Endian
from fit_tool.field import Field
from fit_tool.sub_field import SubField
from fit_tool.profile.profile_type import *
from typing import List as list
from typing import Dict as dict


class SleepAssessmentMessage(DataMessage):
    ID = 346
    NAME = 'sleep_assessment'

    @staticmethod
    def __get_field_size(definition_message: DefinitionMessage, field_id: int) -> int:
        size = 0
        if definition_message:
            field_definition = definition_message.get_field_definition(field_id)
            if field_definition:
                size = field_definition.size

        return size

    def __init__(self, definition_message=None, developer_fields=None, local_id: int = 0,
                 endian: Endian = Endian.LITTLE):
        super().__init__(name=SleepAssessmentMessage.NAME,
                         global_id=SleepAssessmentMessage.ID,
                         local_id=definition_message.local_id if definition_message else local_id,
                         endian=definition_message.endian if definition_message else endian,
                         definition_message=definition_message,
                         developer_fields=developer_fields,
                         fields=[
        SleepAssessmentCombinedAwakeScoreField(
            size=self.__get_field_size(definition_message, SleepAssessmentCombinedAwakeScoreField.ID),
            growable=definition_message is None), 
        SleepAssessmentAwakeTimeScoreField(
            size=self.__get_field_size(definition_message, SleepAssessmentAwakeTimeScoreField.ID),
            growable=definition_message is None), 
        SleepAssessmentAwakeningsCountScoreField(
            size=self.__get_field_size(definition_message, SleepAssessmentAwakeningsCountScoreField.ID),
            growable=definition_message is None), 
        SleepAssessmentDeepSleepScoreField(
            size=self.__get_field_size(definition_message, SleepAssessmentDeepSleepScoreField.ID),
            growable=definition_message is None), 
        SleepAssessmentSleepDurationScoreField(
            size=self.__get_field_size(definition_message, SleepAssessmentSleepDurationScoreField.ID),
            growable=definition_message is None), 
        SleepAssessmentLightSleepScoreField(
            size=self.__get_field_size(definition_message, SleepAssessmentLightSleepScoreField.ID),
            growable=definition_message is None), 
        SleepAssessmentOverallSleepScoreField(
            size=self.__get_field_size(definition_message, SleepAssessmentOverallSleepScoreField.ID),
            growable=definition_message is None), 
        SleepAssessmentSleepQualityScoreField(
            size=self.__get_field_size(definition_message, SleepAssessmentSleepQualityScoreField.ID),
            growable=definition_message is None), 
        SleepAssessmentSleepRecoveryScoreField(
            size=self.__get_field_size(definition_message, SleepAssessmentSleepRecoveryScoreField.ID),
            growable=definition_message is None), 
        SleepAssessmentRemSleepScoreField(
            size=self.__get_field_size(definition_message, SleepAssessmentRemSleepScoreField.ID),
            growable=definition_message is None), 
        SleepAssessmentSleepRestlessnessScoreField(
            size=self.__get_field_size(definition_message, SleepAssessmentSleepRestlessnessScoreField.ID),
            growable=definition_message is None), 
        SleepAssessmentAwakeningsCountField(
            size=self.__get_field_size(definition_message, SleepAssessmentAwakeningsCountField.ID),
            growable=definition_message is None), 
        SleepAssessmentInterruptionsScoreField(
            size=self.__get_field_size(definition_message, SleepAssessmentInterruptionsScoreField.ID),
            growable=definition_message is None), 
        SleepAssessmentAverageStressDuringSleepField(
            size=self.__get_field_size(definition_message, SleepAssessmentAverageStressDuringSleepField.ID),
            growable=definition_message is None)
        ])

        self.growable = self.definition_message is None

    @classmethod
    def from_bytes(cls, definition_message: DefinitionMessage, developer_fields: list[DeveloperField],
                   bytes_buffer: bytes, offset: int = 0):
        message = cls(definition_message=definition_message, developer_fields=developer_fields)
        message.read_from_bytes(bytes_buffer, offset)
        return message




    @property
    def combined_awake_score(self) -> Optional[int]:
        field = self.get_field(SleepAssessmentCombinedAwakeScoreField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @combined_awake_score.setter
    def combined_awake_score(self, value: int):
        field = self.get_field(SleepAssessmentCombinedAwakeScoreField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def awake_time_score(self) -> Optional[int]:
        field = self.get_field(SleepAssessmentAwakeTimeScoreField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @awake_time_score.setter
    def awake_time_score(self, value: int):
        field = self.get_field(SleepAssessmentAwakeTimeScoreField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def awakenings_count_score(self) -> Optional[int]:
        field = self.get_field(SleepAssessmentAwakeningsCountScoreField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @awakenings_count_score.setter
    def awakenings_count_score(self, value: int):
        field = self.get_field(SleepAssessmentAwakeningsCountScoreField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def deep_sleep_score(self) -> Optional[int]:
        field = self.get_field(SleepAssessmentDeepSleepScoreField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @deep_sleep_score.setter
    def deep_sleep_score(self, value: int):
        field = self.get_field(SleepAssessmentDeepSleepScoreField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def sleep_duration_score(self) -> Optional[int]:
        field = self.get_field(SleepAssessmentSleepDurationScoreField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @sleep_duration_score.setter
    def sleep_duration_score(self, value: int):
        field = self.get_field(SleepAssessmentSleepDurationScoreField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def light_sleep_score(self) -> Optional[int]:
        field = self.get_field(SleepAssessmentLightSleepScoreField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @light_sleep_score.setter
    def light_sleep_score(self, value: int):
        field = self.get_field(SleepAssessmentLightSleepScoreField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def overall_sleep_score(self) -> Optional[int]:
        field = self.get_field(SleepAssessmentOverallSleepScoreField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @overall_sleep_score.setter
    def overall_sleep_score(self, value: int):
        field = self.get_field(SleepAssessmentOverallSleepScoreField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def sleep_quality_score(self) -> Optional[int]:
        field = self.get_field(SleepAssessmentSleepQualityScoreField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @sleep_quality_score.setter
    def sleep_quality_score(self, value: int):
        field = self.get_field(SleepAssessmentSleepQualityScoreField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def sleep_recovery_score(self) -> Optional[int]:
        field = self.get_field(SleepAssessmentSleepRecoveryScoreField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @sleep_recovery_score.setter
    def sleep_recovery_score(self, value: int):
        field = self.get_field(SleepAssessmentSleepRecoveryScoreField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def rem_sleep_score(self) -> Optional[int]:
        field = self.get_field(SleepAssessmentRemSleepScoreField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @rem_sleep_score.setter
    def rem_sleep_score(self, value: int):
        field = self.get_field(SleepAssessmentRemSleepScoreField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def sleep_restlessness_score(self) -> Optional[int]:
        field = self.get_field(SleepAssessmentSleepRestlessnessScoreField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @sleep_restlessness_score.setter
    def sleep_restlessness_score(self, value: int):
        field = self.get_field(SleepAssessmentSleepRestlessnessScoreField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def awakenings_count(self) -> Optional[int]:
        field = self.get_field(SleepAssessmentAwakeningsCountField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @awakenings_count.setter
    def awakenings_count(self, value: int):
        field = self.get_field(SleepAssessmentAwakeningsCountField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def interruptions_score(self) -> Optional[int]:
        field = self.get_field(SleepAssessmentInterruptionsScoreField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @interruptions_score.setter
    def interruptions_score(self, value: int):
        field = self.get_field(SleepAssessmentInterruptionsScoreField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def average_stress_during_sleep(self) -> Optional[float]:
        field = self.get_field(SleepAssessmentAverageStressDuringSleepField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @average_stress_during_sleep.setter
    def average_stress_during_sleep(self, value: float):
        field = self.get_field(SleepAssessmentAverageStressDuringSleepField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    





class SleepAssessmentCombinedAwakeScoreField(Field):
    ID = 0

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='combined_awake_score',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class SleepAssessmentAwakeTimeScoreField(Field):
    ID = 1

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='awake_time_score',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class SleepAssessmentAwakeningsCountScoreField(Field):
    ID = 2

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='awakenings_count_score',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class SleepAssessmentDeepSleepScoreField(Field):
    ID = 3

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='deep_sleep_score',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class SleepAssessmentSleepDurationScoreField(Field):
    ID = 4

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='sleep_duration_score',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class SleepAssessmentLightSleepScoreField(Field):
    ID = 5

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='light_sleep_score',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class SleepAssessmentOverallSleepScoreField(Field):
    ID = 6

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='overall_sleep_score',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class SleepAssessmentSleepQualityScoreField(Field):
    ID = 7

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='sleep_quality_score',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class SleepAssessmentSleepRecoveryScoreField(Field):
    ID = 8

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='sleep_recovery_score',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class SleepAssessmentRemSleepScoreField(Field):
    ID = 9

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='rem_sleep_score',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class SleepAssessmentSleepRestlessnessScoreField(Field):
    ID = 10

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='sleep_restlessness_score',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class SleepAssessmentAwakeningsCountField(Field):
    ID = 11

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='awakenings_count',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class SleepAssessmentInterruptionsScoreField(Field):
    ID = 14

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='interruptions_score',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class SleepAssessmentAverageStressDuringSleepField(Field):
    ID = 15

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='average_stress_during_sleep',
            field_id=self.ID,
            base_type=BaseType.UINT16,
        offset = 0,
                 scale = 100,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )