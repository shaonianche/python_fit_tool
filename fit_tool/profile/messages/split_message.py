# Autogenerated. Do not modify.
#
# Profile: 21.171.00
from typing import Optional

from fit_tool.base_type import BaseType
from fit_tool.data_message import DataMessage
from fit_tool.definition_message import DefinitionMessage
from fit_tool.developer_field import DeveloperField
from fit_tool.endian import Endian
from fit_tool.field import Field
from fit_tool.sub_field import SubField
from fit_tool.profile.profile_type import *
from typing import List as list
from typing import Dict as dict


class SplitMessage(DataMessage):
    ID = 312
    NAME = 'split'

    @staticmethod
    def __get_field_size(definition_message: DefinitionMessage, field_id: int) -> int:
        size = 0
        if definition_message:
            field_definition = definition_message.get_field_definition(field_id)
            if field_definition:
                size = field_definition.size

        return size

    def __init__(self, definition_message=None, developer_fields=None, local_id: int = 0,
                 endian: Endian = Endian.LITTLE):
        super().__init__(name=SplitMessage.NAME,
                         global_id=SplitMessage.ID,
                         local_id=definition_message.local_id if definition_message else local_id,
                         endian=definition_message.endian if definition_message else endian,
                         definition_message=definition_message,
                         developer_fields=developer_fields,
                         fields=[
        MessageIndexField(
            size=self.__get_field_size(definition_message, MessageIndexField.ID),
            growable=definition_message is None), 
        SplitSplitTypeField(
            size=self.__get_field_size(definition_message, SplitSplitTypeField.ID),
            growable=definition_message is None), 
        SplitTotalElapsedTimeField(
            size=self.__get_field_size(definition_message, SplitTotalElapsedTimeField.ID),
            growable=definition_message is None), 
        SplitTotalTimerTimeField(
            size=self.__get_field_size(definition_message, SplitTotalTimerTimeField.ID),
            growable=definition_message is None), 
        SplitTotalDistanceField(
            size=self.__get_field_size(definition_message, SplitTotalDistanceField.ID),
            growable=definition_message is None), 
        SplitAvgSpeedField(
            size=self.__get_field_size(definition_message, SplitAvgSpeedField.ID),
            growable=definition_message is None), 
        SplitStartTimeField(
            size=self.__get_field_size(definition_message, SplitStartTimeField.ID),
            growable=definition_message is None), 
        SplitTotalAscentField(
            size=self.__get_field_size(definition_message, SplitTotalAscentField.ID),
            growable=definition_message is None), 
        SplitTotalDescentField(
            size=self.__get_field_size(definition_message, SplitTotalDescentField.ID),
            growable=definition_message is None), 
        SplitStartPositionLatField(
            size=self.__get_field_size(definition_message, SplitStartPositionLatField.ID),
            growable=definition_message is None), 
        SplitStartPositionLongField(
            size=self.__get_field_size(definition_message, SplitStartPositionLongField.ID),
            growable=definition_message is None), 
        SplitEndPositionLatField(
            size=self.__get_field_size(definition_message, SplitEndPositionLatField.ID),
            growable=definition_message is None), 
        SplitEndPositionLongField(
            size=self.__get_field_size(definition_message, SplitEndPositionLongField.ID),
            growable=definition_message is None), 
        SplitMaxSpeedField(
            size=self.__get_field_size(definition_message, SplitMaxSpeedField.ID),
            growable=definition_message is None), 
        SplitAvgVertSpeedField(
            size=self.__get_field_size(definition_message, SplitAvgVertSpeedField.ID),
            growable=definition_message is None), 
        SplitEndTimeField(
            size=self.__get_field_size(definition_message, SplitEndTimeField.ID),
            growable=definition_message is None), 
        SplitTotalCaloriesField(
            size=self.__get_field_size(definition_message, SplitTotalCaloriesField.ID),
            growable=definition_message is None), 
        SplitStartElevationField(
            size=self.__get_field_size(definition_message, SplitStartElevationField.ID),
            growable=definition_message is None), 
        SplitTotalMovingTimeField(
            size=self.__get_field_size(definition_message, SplitTotalMovingTimeField.ID),
            growable=definition_message is None)
        ])

        self.growable = self.definition_message is None

    @classmethod
    def from_bytes(cls, definition_message: DefinitionMessage, developer_fields: list[DeveloperField],
                   bytes_buffer: bytes, offset: int = 0):
        message = cls(definition_message=definition_message, developer_fields=developer_fields)
        message.read_from_bytes(bytes_buffer, offset)
        return message




    @property
    def message_index(self) -> Optional[int]:
        field = self.get_field(MessageIndexField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @message_index.setter
    def message_index(self, value: int):
        field = self.get_field(MessageIndexField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def split_type(self) -> Optional[SplitType]:
        field = self.get_field(SplitSplitTypeField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @split_type.setter
    def split_type(self, value: SplitType):
        field = self.get_field(SplitSplitTypeField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def total_elapsed_time(self) -> Optional[float]:
        field = self.get_field(SplitTotalElapsedTimeField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @total_elapsed_time.setter
    def total_elapsed_time(self, value: float):
        field = self.get_field(SplitTotalElapsedTimeField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def total_timer_time(self) -> Optional[float]:
        field = self.get_field(SplitTotalTimerTimeField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @total_timer_time.setter
    def total_timer_time(self, value: float):
        field = self.get_field(SplitTotalTimerTimeField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def total_distance(self) -> Optional[float]:
        field = self.get_field(SplitTotalDistanceField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @total_distance.setter
    def total_distance(self, value: float):
        field = self.get_field(SplitTotalDistanceField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def avg_speed(self) -> Optional[float]:
        field = self.get_field(SplitAvgSpeedField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @avg_speed.setter
    def avg_speed(self, value: float):
        field = self.get_field(SplitAvgSpeedField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    
# timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC

    @property
    def start_time(self) -> Optional[int]:
        field = self.get_field(SplitStartTimeField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None


    # timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC

    @start_time.setter
    def start_time(self, value: int):
        field = self.get_field(SplitStartTimeField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def total_ascent(self) -> Optional[int]:
        field = self.get_field(SplitTotalAscentField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @total_ascent.setter
    def total_ascent(self, value: int):
        field = self.get_field(SplitTotalAscentField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def total_descent(self) -> Optional[int]:
        field = self.get_field(SplitTotalDescentField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @total_descent.setter
    def total_descent(self, value: int):
        field = self.get_field(SplitTotalDescentField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def start_position_lat(self) -> Optional[float]:
        field = self.get_field(SplitStartPositionLatField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @start_position_lat.setter
    def start_position_lat(self, value: float):
        field = self.get_field(SplitStartPositionLatField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def start_position_long(self) -> Optional[float]:
        field = self.get_field(SplitStartPositionLongField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @start_position_long.setter
    def start_position_long(self, value: float):
        field = self.get_field(SplitStartPositionLongField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def end_position_lat(self) -> Optional[float]:
        field = self.get_field(SplitEndPositionLatField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @end_position_lat.setter
    def end_position_lat(self, value: float):
        field = self.get_field(SplitEndPositionLatField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def end_position_long(self) -> Optional[float]:
        field = self.get_field(SplitEndPositionLongField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @end_position_long.setter
    def end_position_long(self, value: float):
        field = self.get_field(SplitEndPositionLongField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def max_speed(self) -> Optional[float]:
        field = self.get_field(SplitMaxSpeedField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @max_speed.setter
    def max_speed(self, value: float):
        field = self.get_field(SplitMaxSpeedField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def avg_vert_speed(self) -> Optional[float]:
        field = self.get_field(SplitAvgVertSpeedField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @avg_vert_speed.setter
    def avg_vert_speed(self, value: float):
        field = self.get_field(SplitAvgVertSpeedField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    
# timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC

    @property
    def end_time(self) -> Optional[int]:
        field = self.get_field(SplitEndTimeField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None


    # timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC

    @end_time.setter
    def end_time(self, value: int):
        field = self.get_field(SplitEndTimeField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def total_calories(self) -> Optional[int]:
        field = self.get_field(SplitTotalCaloriesField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @total_calories.setter
    def total_calories(self, value: int):
        field = self.get_field(SplitTotalCaloriesField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def start_elevation(self) -> Optional[float]:
        field = self.get_field(SplitStartElevationField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @start_elevation.setter
    def start_elevation(self, value: float):
        field = self.get_field(SplitStartElevationField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def total_moving_time(self) -> Optional[float]:
        field = self.get_field(SplitTotalMovingTimeField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @total_moving_time.setter
    def total_moving_time(self, value: float):
        field = self.get_field(SplitTotalMovingTimeField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    





class MessageIndexField(Field):
    ID = 254

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='message_index',
            field_id=self.ID,
            base_type=BaseType.UINT16,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class SplitSplitTypeField(Field):
    ID = 0

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='split_type',
            field_id=self.ID,
            base_type=BaseType.ENUM,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class SplitTotalElapsedTimeField(Field):
    ID = 1

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='total_elapsed_time',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = 0,
                 scale = 1000,
                         size = size,
        units = 's',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class SplitTotalTimerTimeField(Field):
    ID = 2

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='total_timer_time',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = 0,
                 scale = 1000,
                         size = size,
        units = 's',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class SplitTotalDistanceField(Field):
    ID = 3

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='total_distance',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = 0,
                 scale = 100,
                         size = size,
        units = 'm',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class SplitAvgSpeedField(Field):
    ID = 4

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='avg_speed',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = 0,
                 scale = 1000,
                         size = size,
        units = 'm/s',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class SplitStartTimeField(Field):
    ID = 9

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='start_time',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = -631065600000,
                 scale = 0.001,
                         size = size,
        units = 'ms',
        type_name = 'date_time',
        growable = growable,
                   sub_fields = [
        ]
        )


class SplitTotalAscentField(Field):
    ID = 13

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='total_ascent',
            field_id=self.ID,
            base_type=BaseType.UINT16,
        offset = 0,
                 scale = 1,
                         size = size,
        units = 'm',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class SplitTotalDescentField(Field):
    ID = 14

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='total_descent',
            field_id=self.ID,
            base_type=BaseType.UINT16,
        offset = 0,
                 scale = 1,
                         size = size,
        units = 'm',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class SplitStartPositionLatField(Field):
    ID = 21

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='start_position_lat',
            field_id=self.ID,
            base_type=BaseType.SINT32,
        offset = 0,
                 scale = 11930464.711111112,
                         size = size,
        units = 'degrees',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class SplitStartPositionLongField(Field):
    ID = 22

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='start_position_long',
            field_id=self.ID,
            base_type=BaseType.SINT32,
        offset = 0,
                 scale = 11930464.711111112,
                         size = size,
        units = 'degrees',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class SplitEndPositionLatField(Field):
    ID = 23

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='end_position_lat',
            field_id=self.ID,
            base_type=BaseType.SINT32,
        offset = 0,
                 scale = 11930464.711111112,
                         size = size,
        units = 'degrees',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class SplitEndPositionLongField(Field):
    ID = 24

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='end_position_long',
            field_id=self.ID,
            base_type=BaseType.SINT32,
        offset = 0,
                 scale = 11930464.711111112,
                         size = size,
        units = 'degrees',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class SplitMaxSpeedField(Field):
    ID = 25

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='max_speed',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = 0,
                 scale = 1000,
                         size = size,
        units = 'm/s',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class SplitAvgVertSpeedField(Field):
    ID = 26

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='avg_vert_speed',
            field_id=self.ID,
            base_type=BaseType.SINT32,
        offset = 0,
                 scale = 1000,
                         size = size,
        units = 'm/s',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class SplitEndTimeField(Field):
    ID = 27

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='end_time',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = -631065600000,
                 scale = 0.001,
                         size = size,
        units = 'ms',
        type_name = 'date_time',
        growable = growable,
                   sub_fields = [
        ]
        )


class SplitTotalCaloriesField(Field):
    ID = 28

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='total_calories',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = 0,
                 scale = 1,
                         size = size,
        units = 'kcal',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class SplitStartElevationField(Field):
    ID = 74

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='start_elevation',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = 500,
                 scale = 5,
                         size = size,
        units = 'm',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class SplitTotalMovingTimeField(Field):
    ID = 110

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='total_moving_time',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = 0,
                 scale = 1000,
                         size = size,
        units = 's',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )