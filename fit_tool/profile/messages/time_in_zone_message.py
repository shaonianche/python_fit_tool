# Autogenerated. Do not modify.
#
# Profile: 21.171.00
from typing import Optional

from fit_tool.base_type import BaseType
from fit_tool.data_message import DataMessage
from fit_tool.definition_message import DefinitionMessage
from fit_tool.developer_field import DeveloperField
from fit_tool.endian import Endian
from fit_tool.field import Field
from fit_tool.sub_field import SubField
from fit_tool.profile.profile_type import *
from typing import List as list
from typing import Dict as dict


class TimeInZoneMessage(DataMessage):
    ID = 216
    NAME = 'time_in_zone'

    @staticmethod
    def __get_field_size(definition_message: DefinitionMessage, field_id: int) -> int:
        size = 0
        if definition_message:
            field_definition = definition_message.get_field_definition(field_id)
            if field_definition:
                size = field_definition.size

        return size

    def __init__(self, definition_message=None, developer_fields=None, local_id: int = 0,
                 endian: Endian = Endian.LITTLE):
        super().__init__(name=TimeInZoneMessage.NAME,
                         global_id=TimeInZoneMessage.ID,
                         local_id=definition_message.local_id if definition_message else local_id,
                         endian=definition_message.endian if definition_message else endian,
                         definition_message=definition_message,
                         developer_fields=developer_fields,
                         fields=[
        TimestampField(
            size=self.__get_field_size(definition_message, TimestampField.ID),
            growable=definition_message is None), 
        TimeInZoneReferenceMesgField(
            size=self.__get_field_size(definition_message, TimeInZoneReferenceMesgField.ID),
            growable=definition_message is None), 
        TimeInZoneReferenceIndexField(
            size=self.__get_field_size(definition_message, TimeInZoneReferenceIndexField.ID),
            growable=definition_message is None), 
        TimeInZoneTimeInHrZoneField(
            size=self.__get_field_size(definition_message, TimeInZoneTimeInHrZoneField.ID),
            growable=definition_message is None), 
        TimeInZoneTimeInSpeedZoneField(
            size=self.__get_field_size(definition_message, TimeInZoneTimeInSpeedZoneField.ID),
            growable=definition_message is None), 
        TimeInZoneTimeInCadenceZoneField(
            size=self.__get_field_size(definition_message, TimeInZoneTimeInCadenceZoneField.ID),
            growable=definition_message is None), 
        TimeInZoneTimeInPowerZoneField(
            size=self.__get_field_size(definition_message, TimeInZoneTimeInPowerZoneField.ID),
            growable=definition_message is None), 
        TimeInZoneHrZoneHighBoundaryField(
            size=self.__get_field_size(definition_message, TimeInZoneHrZoneHighBoundaryField.ID),
            growable=definition_message is None), 
        TimeInZoneSpeedZoneHighBoundaryField(
            size=self.__get_field_size(definition_message, TimeInZoneSpeedZoneHighBoundaryField.ID),
            growable=definition_message is None), 
        TimeInZoneCadenceZoneHighBondaryField(
            size=self.__get_field_size(definition_message, TimeInZoneCadenceZoneHighBondaryField.ID),
            growable=definition_message is None), 
        TimeInZonePowerZoneHighBoundaryField(
            size=self.__get_field_size(definition_message, TimeInZonePowerZoneHighBoundaryField.ID),
            growable=definition_message is None), 
        TimeInZoneHrCalcTypeField(
            size=self.__get_field_size(definition_message, TimeInZoneHrCalcTypeField.ID),
            growable=definition_message is None), 
        TimeInZoneMaxHeartRateField(
            size=self.__get_field_size(definition_message, TimeInZoneMaxHeartRateField.ID),
            growable=definition_message is None), 
        TimeInZoneRestingHeartRateField(
            size=self.__get_field_size(definition_message, TimeInZoneRestingHeartRateField.ID),
            growable=definition_message is None), 
        TimeInZoneThresholdHeartRateField(
            size=self.__get_field_size(definition_message, TimeInZoneThresholdHeartRateField.ID),
            growable=definition_message is None), 
        TimeInZonePwrCalcTypeField(
            size=self.__get_field_size(definition_message, TimeInZonePwrCalcTypeField.ID),
            growable=definition_message is None), 
        TimeInZoneFunctionalThresholdPowerField(
            size=self.__get_field_size(definition_message, TimeInZoneFunctionalThresholdPowerField.ID),
            growable=definition_message is None)
        ])

        self.growable = self.definition_message is None

    @classmethod
    def from_bytes(cls, definition_message: DefinitionMessage, developer_fields: list[DeveloperField],
                   bytes_buffer: bytes, offset: int = 0):
        message = cls(definition_message=definition_message, developer_fields=developer_fields)
        message.read_from_bytes(bytes_buffer, offset)
        return message



# timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC

    @property
    def timestamp(self) -> Optional[int]:
        field = self.get_field(TimestampField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None


    # timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC

    @timestamp.setter
    def timestamp(self, value: int):
        field = self.get_field(TimestampField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def reference_mesg(self) -> Optional[int]:
        field = self.get_field(TimeInZoneReferenceMesgField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @reference_mesg.setter
    def reference_mesg(self, value: int):
        field = self.get_field(TimeInZoneReferenceMesgField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def reference_index(self) -> Optional[int]:
        field = self.get_field(TimeInZoneReferenceIndexField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @reference_index.setter
    def reference_index(self, value: int):
        field = self.get_field(TimeInZoneReferenceIndexField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def time_in_hr_zone(self) -> Optional[list[float]]:
        field = self.get_field(TimeInZoneTimeInHrZoneField.ID)
        if field and field.is_valid():
            return field.get_values()
        else:
            return None



    @time_in_hr_zone.setter
    def time_in_hr_zone(self, value: list[float]):
        field = self.get_field(TimeInZoneTimeInHrZoneField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                field.set_values(value)

    

    @property
    def time_in_speed_zone(self) -> Optional[list[float]]:
        field = self.get_field(TimeInZoneTimeInSpeedZoneField.ID)
        if field and field.is_valid():
            return field.get_values()
        else:
            return None



    @time_in_speed_zone.setter
    def time_in_speed_zone(self, value: list[float]):
        field = self.get_field(TimeInZoneTimeInSpeedZoneField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                field.set_values(value)

    

    @property
    def time_in_cadence_zone(self) -> Optional[list[float]]:
        field = self.get_field(TimeInZoneTimeInCadenceZoneField.ID)
        if field and field.is_valid():
            return field.get_values()
        else:
            return None



    @time_in_cadence_zone.setter
    def time_in_cadence_zone(self, value: list[float]):
        field = self.get_field(TimeInZoneTimeInCadenceZoneField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                field.set_values(value)

    

    @property
    def time_in_power_zone(self) -> Optional[list[float]]:
        field = self.get_field(TimeInZoneTimeInPowerZoneField.ID)
        if field and field.is_valid():
            return field.get_values()
        else:
            return None



    @time_in_power_zone.setter
    def time_in_power_zone(self, value: list[float]):
        field = self.get_field(TimeInZoneTimeInPowerZoneField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                field.set_values(value)

    

    @property
    def hr_zone_high_boundary(self) -> Optional[list[int]]:
        field = self.get_field(TimeInZoneHrZoneHighBoundaryField.ID)
        if field and field.is_valid():
            return field.get_values()
        else:
            return None



    @hr_zone_high_boundary.setter
    def hr_zone_high_boundary(self, value: list[int]):
        field = self.get_field(TimeInZoneHrZoneHighBoundaryField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                field.set_values(value)

    

    @property
    def speed_zone_high_boundary(self) -> Optional[list[float]]:
        field = self.get_field(TimeInZoneSpeedZoneHighBoundaryField.ID)
        if field and field.is_valid():
            return field.get_values()
        else:
            return None



    @speed_zone_high_boundary.setter
    def speed_zone_high_boundary(self, value: list[float]):
        field = self.get_field(TimeInZoneSpeedZoneHighBoundaryField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                field.set_values(value)

    

    @property
    def cadence_zone_high_bondary(self) -> Optional[list[int]]:
        field = self.get_field(TimeInZoneCadenceZoneHighBondaryField.ID)
        if field and field.is_valid():
            return field.get_values()
        else:
            return None



    @cadence_zone_high_bondary.setter
    def cadence_zone_high_bondary(self, value: list[int]):
        field = self.get_field(TimeInZoneCadenceZoneHighBondaryField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                field.set_values(value)

    

    @property
    def power_zone_high_boundary(self) -> Optional[list[int]]:
        field = self.get_field(TimeInZonePowerZoneHighBoundaryField.ID)
        if field and field.is_valid():
            return field.get_values()
        else:
            return None



    @power_zone_high_boundary.setter
    def power_zone_high_boundary(self, value: list[int]):
        field = self.get_field(TimeInZonePowerZoneHighBoundaryField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                field.set_values(value)

    

    @property
    def hr_calc_type(self) -> Optional[HrZoneCalc]:
        field = self.get_field(TimeInZoneHrCalcTypeField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @hr_calc_type.setter
    def hr_calc_type(self, value: HrZoneCalc):
        field = self.get_field(TimeInZoneHrCalcTypeField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def max_heart_rate(self) -> Optional[int]:
        field = self.get_field(TimeInZoneMaxHeartRateField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @max_heart_rate.setter
    def max_heart_rate(self, value: int):
        field = self.get_field(TimeInZoneMaxHeartRateField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def resting_heart_rate(self) -> Optional[int]:
        field = self.get_field(TimeInZoneRestingHeartRateField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @resting_heart_rate.setter
    def resting_heart_rate(self, value: int):
        field = self.get_field(TimeInZoneRestingHeartRateField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def threshold_heart_rate(self) -> Optional[int]:
        field = self.get_field(TimeInZoneThresholdHeartRateField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @threshold_heart_rate.setter
    def threshold_heart_rate(self, value: int):
        field = self.get_field(TimeInZoneThresholdHeartRateField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def pwr_calc_type(self) -> Optional[PwrZoneCalc]:
        field = self.get_field(TimeInZonePwrCalcTypeField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @pwr_calc_type.setter
    def pwr_calc_type(self, value: PwrZoneCalc):
        field = self.get_field(TimeInZonePwrCalcTypeField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def functional_threshold_power(self) -> Optional[int]:
        field = self.get_field(TimeInZoneFunctionalThresholdPowerField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @functional_threshold_power.setter
    def functional_threshold_power(self, value: int):
        field = self.get_field(TimeInZoneFunctionalThresholdPowerField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    





class TimestampField(Field):
    ID = 253

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='timestamp',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = -631065600000,
                 scale = 0.001,
                         size = size,
        units = 'ms',
        type_name = 'date_time',
        growable = growable,
                   sub_fields = [
        ]
        )


class TimeInZoneReferenceMesgField(Field):
    ID = 0

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='reference_mesg',
            field_id=self.ID,
            base_type=BaseType.UINT16,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class TimeInZoneReferenceIndexField(Field):
    ID = 1

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='reference_index',
            field_id=self.ID,
            base_type=BaseType.UINT16,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class TimeInZoneTimeInHrZoneField(Field):
    ID = 2

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='time_in_hr_zone',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = 0,
                 scale = 1000,
                         size = size,
        units = 's',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class TimeInZoneTimeInSpeedZoneField(Field):
    ID = 3

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='time_in_speed_zone',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = 0,
                 scale = 1000,
                         size = size,
        units = 's',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class TimeInZoneTimeInCadenceZoneField(Field):
    ID = 4

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='time_in_cadence_zone',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = 0,
                 scale = 1000,
                         size = size,
        units = 's',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class TimeInZoneTimeInPowerZoneField(Field):
    ID = 5

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='time_in_power_zone',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = 0,
                 scale = 1000,
                         size = size,
        units = 's',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class TimeInZoneHrZoneHighBoundaryField(Field):
    ID = 6

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='hr_zone_high_boundary',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        units = 'bpm',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class TimeInZoneSpeedZoneHighBoundaryField(Field):
    ID = 7

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='speed_zone_high_boundary',
            field_id=self.ID,
            base_type=BaseType.UINT16,
        offset = 0,
                 scale = 1000,
                         size = size,
        units = 'm/s',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class TimeInZoneCadenceZoneHighBondaryField(Field):
    ID = 8

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='cadence_zone_high_bondary',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        units = 'rpm',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class TimeInZonePowerZoneHighBoundaryField(Field):
    ID = 9

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='power_zone_high_boundary',
            field_id=self.ID,
            base_type=BaseType.UINT16,
        offset = 0,
                 scale = 1,
                         size = size,
        units = 'watts',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class TimeInZoneHrCalcTypeField(Field):
    ID = 10

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='hr_calc_type',
            field_id=self.ID,
            base_type=BaseType.ENUM,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class TimeInZoneMaxHeartRateField(Field):
    ID = 11

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='max_heart_rate',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class TimeInZoneRestingHeartRateField(Field):
    ID = 12

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='resting_heart_rate',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class TimeInZoneThresholdHeartRateField(Field):
    ID = 13

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='threshold_heart_rate',
            field_id=self.ID,
            base_type=BaseType.UINT8,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class TimeInZonePwrCalcTypeField(Field):
    ID = 14

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='pwr_calc_type',
            field_id=self.ID,
            base_type=BaseType.ENUM,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )


class TimeInZoneFunctionalThresholdPowerField(Field):
    ID = 15

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='functional_threshold_power',
            field_id=self.ID,
            base_type=BaseType.UINT16,
        offset = 0,
                 scale = 1,
                         size = size,
        growable = growable,
                   sub_fields = [
        ]
        )