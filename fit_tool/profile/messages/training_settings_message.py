# Autogenerated. Do not modify.
#
# Profile: 21.171.00
from typing import Optional

from fit_tool.base_type import BaseType
from fit_tool.data_message import DataMessage
from fit_tool.definition_message import DefinitionMessage
from fit_tool.developer_field import DeveloperField
from fit_tool.endian import Endian
from fit_tool.field import Field
from fit_tool.sub_field import SubField
from fit_tool.profile.profile_type import *
from typing import List as list
from typing import Dict as dict


class TrainingSettingsMessage(DataMessage):
    ID = 13
    NAME = 'training_settings'

    @staticmethod
    def __get_field_size(definition_message: DefinitionMessage, field_id: int) -> int:
        size = 0
        if definition_message:
            field_definition = definition_message.get_field_definition(field_id)
            if field_definition:
                size = field_definition.size

        return size

    def __init__(self, definition_message=None, developer_fields=None, local_id: int = 0,
                 endian: Endian = Endian.LITTLE):
        super().__init__(name=TrainingSettingsMessage.NAME,
                         global_id=TrainingSettingsMessage.ID,
                         local_id=definition_message.local_id if definition_message else local_id,
                         endian=definition_message.endian if definition_message else endian,
                         definition_message=definition_message,
                         developer_fields=developer_fields,
                         fields=[
        TrainingSettingsTargetDistanceField(
            size=self.__get_field_size(definition_message, TrainingSettingsTargetDistanceField.ID),
            growable=definition_message is None), 
        TrainingSettingsTargetSpeedField(
            size=self.__get_field_size(definition_message, TrainingSettingsTargetSpeedField.ID),
            growable=definition_message is None), 
        TrainingSettingsTargetTimeField(
            size=self.__get_field_size(definition_message, TrainingSettingsTargetTimeField.ID),
            growable=definition_message is None), 
        TrainingSettingsPreciseTargetSpeedField(
            size=self.__get_field_size(definition_message, TrainingSettingsPreciseTargetSpeedField.ID),
            growable=definition_message is None)
        ])

        self.growable = self.definition_message is None

    @classmethod
    def from_bytes(cls, definition_message: DefinitionMessage, developer_fields: list[DeveloperField],
                   bytes_buffer: bytes, offset: int = 0):
        message = cls(definition_message=definition_message, developer_fields=developer_fields)
        message.read_from_bytes(bytes_buffer, offset)
        return message




    @property
    def target_distance(self) -> Optional[float]:
        field = self.get_field(TrainingSettingsTargetDistanceField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @target_distance.setter
    def target_distance(self, value: float):
        field = self.get_field(TrainingSettingsTargetDistanceField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def target_speed(self) -> Optional[float]:
        field = self.get_field(TrainingSettingsTargetSpeedField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @target_speed.setter
    def target_speed(self, value: float):
        field = self.get_field(TrainingSettingsTargetSpeedField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def target_time(self) -> Optional[int]:
        field = self.get_field(TrainingSettingsTargetTimeField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @target_time.setter
    def target_time(self, value: int):
        field = self.get_field(TrainingSettingsTargetTimeField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    

    @property
    def precise_target_speed(self) -> Optional[float]:
        field = self.get_field(TrainingSettingsPreciseTargetSpeedField.ID)
        if field and field.is_valid():
            sub_field = field.get_valid_sub_field(self.fields)
            return field.get_value(sub_field=sub_field)
        else:
            return None



    @precise_target_speed.setter
    def precise_target_speed(self, value: float):
        field = self.get_field(TrainingSettingsPreciseTargetSpeedField.ID)

        if field:
            if value is None:
                field.clear()
            else:
                sub_field = field.get_valid_sub_field(self.fields)
                field.set_value(0, value, sub_field)

    





class TrainingSettingsTargetDistanceField(Field):
    ID = 31

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='target_distance',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = 0,
                 scale = 100,
                         size = size,
        units = 'm',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class TrainingSettingsTargetSpeedField(Field):
    ID = 32

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='target_speed',
            field_id=self.ID,
            base_type=BaseType.UINT16,
        offset = 0,
                 scale = 1000,
                         size = size,
        units = 'm/s',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class TrainingSettingsTargetTimeField(Field):
    ID = 33

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='target_time',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = 0,
                 scale = 1,
                         size = size,
        units = 's',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )


class TrainingSettingsPreciseTargetSpeedField(Field):
    ID = 153

    def __init__(self, size: int = 0, growable: bool = True):
        super().__init__(
            name='precise_target_speed',
            field_id=self.ID,
            base_type=BaseType.UINT32,
        offset = 0,
                 scale = 1000000,
                         size = size,
        units = 'm/s',
        type_name = '',
        growable = growable,
                   sub_fields = [
        ]
        )